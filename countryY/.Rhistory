}
}
return(totalpos)
}
head(summary)
summary$marker01
which(colnames(summary)=="marker01")
#User will select the summarized data filename (all.csv), they will need to have their working directory set to the directory with this file
sumview<-function(filename){
summary<-read.csv(filename)
head(summary)
tail(summary)
#create a variable for tracking number of positive cases
#code will loop through each row, but only columns that contain markers
#if one of the rows markers contains a 1 it will increment variable and move to the next row
#loop through all rows, if any contain a 1 count it and move to the next row
for(i in 1:nrow(summary)) {
for(j in which(colnames(summary)=="marker01"):which(colnames(summary)=="marker10")) {
if (summary[i,j] == 1){
totalpos <- (totalpos + 1)
break
}
}
}
return(totalpos)
}
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
#User will select the summarized data filename (all.csv), they will need to have their working directory set to the directory with this file
sumview<-function(filename){
summary<-read.csv(filename)
head(summary)
tail(summary)
#create a variable for tracking number of positive cases
totalpos = 0
#code will loop through each row, but only columns that contain markers
#if one of the rows markers contains a 1 it will increment variable and move to the next row
#loop through all rows, if any contain a 1 count it and move to the next row
for(i in 1:nrow(summary)) {
for(j in (which(colnames(summary)=="marker01"):which(colnames(summary)=="marker10"))) {
if (summary[i,j] == 1){
totalpos <- (totalpos + 1)
break
}
}
}
return(totalpos)
}
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY")
#"C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project"
file.remove(list.files(pattern = "*.csv"))
#clear previous contents
rm(list=ls())
#set working directory to the folder where allData.csv is contained
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
source("supportingFunctions.R")
library(ggplot2)
library(cowplot)
###From part 1: Use custom function convertdirectorytocsv() to convert all .txt files in countryY directory to .csv files
#Usage: convertdirectorytocsv(directory_containing_country_.txt_files)
convertdirectorytocsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY")
###From part 2:
##use custom function to compile all files in country X database
#Usage: many2onecsv(directory_containing_country_.csv_files, option_on_how_to_handle_NA_values)
#User can select "warn" or "remove" as option for how to deal with NAs in data. Default is "do_nothing"
many2onecsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryX/","do_nothing")
#use custom function to compile all files in country Y database and append them to the compiled data created from country X database
#This function can continued to be called, by replacing the directory name with whatever country has a directory of compiled .csv files
#Usage: many2onecsv(directory_containing_country_.csv_files, option_on_how_to_handle_NA_values)
#User can select "warn" or "remove" as option for how to deal with NAs in data. Default is "do_nothing"
many2onecsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY/","do_nothing")
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
#####For supporting answers to questions 1 and 2
#custom function that converts the data in all.csv and creates a data frame for each graph used to support answers to the questions
#data frames produces will be final_df_for_analysis and final_dt_for_bar_plot
#new directory needs to be set before running
#set wd to directory with the all.csv file
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
#load the combined data from all countries and name it "data"
data<-read.csv("all.csv")
#now i can create a dataframe for Country X and Country Y with the applicable Titles and empty rows
dfcx <- data.frame("Marker_01_X" = integer(), "Marker_02_X" = integer(), "Marker_03_X" = integer(), "Marker_04_X" = integer(), "Marker_05_X" = integer(), "Marker_06_X" = integer(), "Marker_07_X" = integer(), "Marker_08_X" = integer(), "Marker_09_X" = integer(), "Marker_10_X" = integer(), "Cumulative_Pos_X" = integer(), "DayofYear_X" = integer(), stringsAsFactors = FALSE)
dfcx
dfcy <- data.frame("Marker_01_Y" = integer(), "Marker_02_Y" = integer(), "Marker_03_Y" = integer(), "Marker_04_Y" = integer(), "Marker_05_Y" = integer(), "Marker_06_Y" = integer(), "Marker_07_Y" = integer(), "Marker_08_Y" = integer(), "Marker_09_Y" = integer(), "Marker_10_Y" = integer(), "Cumulative_Pos_Y" = integer(), "DayofYear_Y" = integer(), stringsAsFactors = FALSE)
dfcy
data = data[,!grepl("age", names(data))]
data = data[,!grepl("gender", names(data))]
head(data)
#now I will use loops to look through each row in "data"
#I will be using these loops to place any positive cases from country X into a data frame
#And I will be placing any positive cases from country Y into a separate data frame
#I will do this by first checking the row to see what country the data pertains to
#Then I will look through each marker in that row to determine if there is a positive marker
#As soon as a positive marker is detected, the nested for loop will "break", the data will be placed into the next row in the corresponding countries dataframe
#And the next row will be looked at by the starting for loop
for (j in 1:length(data$Country)){
if (data$Country[j] == "X"){
for (i in 1:(length(colnames(data))-2)){
if (data[j,i] == 1){
dfcx[nrow(dfcx) + 1,] <- data[j,]
break
}
}
}
else{
for (i in 1:(length(colnames(data))-2)){
if (data[j,i] == 1){
dfcy[nrow(dfcy) + 1,] <- data[j,]
break
}
}
}
}
length(colnames(data))
#determine what the first day of the year testing was performed
first_day = min(data$dayofYear)
#determine what the last day of the year testing was performed
last_day = max(data$dayofYear)
#First processing everything for country X:
mar1cumx <- cumsum(dfcx$Marker_01_X)
mar2cumx <- cumsum(dfcx$Marker_02_X)
mar3cumx <- cumsum(dfcx$Marker_03_X)
mar4cumx <- cumsum(dfcx$Marker_04_X)
mar5cumx <- cumsum(dfcx$Marker_05_X)
mar6cumx <- cumsum(dfcx$Marker_06_X)
mar7cumx <- cumsum(dfcx$Marker_07_X)
mar8cumx <- cumsum(dfcx$Marker_08_X)
mar9cumx <- cumsum(dfcx$Marker_09_X)
mar10cumx <- cumsum(dfcx$Marker_10_X)
subjcumx <- cumsum(rep(1,length(dfcx$Cumulative_Pos_X)))
day_of_yearx <- dfcx$DayofYear_X
markercumulativex <- data.frame(cbind(mar1cumx,mar2cumx,mar3cumx,mar4cumx,mar5cumx,mar6cumx,mar7cumx,mar8cumx,mar9cumx,mar10cumx,subjcumx,day_of_yearx))
head(markercumulativex)
tail(markercumulativex)
#Now processing everything for country Y:
mar1cumy <- cumsum(dfcy$Marker_01_Y)
mar2cumy <- cumsum(dfcy$Marker_02_Y)
mar3cumy <- cumsum(dfcy$Marker_03_Y)
mar4cumy <- cumsum(dfcy$Marker_04_Y)
mar5cumy <- cumsum(dfcy$Marker_05_Y)
mar6cumy <- cumsum(dfcy$Marker_06_Y)
mar7cumy <- cumsum(dfcy$Marker_07_Y)
mar8cumy <- cumsum(dfcy$Marker_08_Y)
mar9cumy <- cumsum(dfcy$Marker_09_Y)
mar10cumy <- cumsum(dfcy$Marker_10_Y)
subjcumy <- cumsum(rep(1,length(dfcy$Cumulative_Pos_Y)))
day_of_yeary <- dfcy$DayofYear_Y
markercumulativey <- data.frame(cbind(mar1cumy,mar2cumy,mar3cumy,mar4cumy,mar5cumy,mar6cumy,mar7cumy,mar8cumy,mar9cumy,mar10cumy,subjcumy,day_of_yeary))
head(markercumulativey)
tail(markercumulativey)
x_totals_by_day <- data.frame("Marker_01_X" = integer(), "Marker_02_X" = integer(), "Marker_03_X" = integer(), "Marker_04_X" = integer(), "Marker_05_X" = integer(), "Marker_06_X" = integer(), "Marker_07_X" = integer(), "Marker_08_X" = integer(), "Marker_09_X" = integer(), "Marker_10_X" = integer(), "Cumulative_Pos_X" = integer(), "DayofYear_X" = integer(), stringsAsFactors = FALSE)
#go from 120-175
#check if it is in day_of_yearx
#or go through each row
#using dayxcurr and dayxprev to know when the day increments. I will then save the row before the increment.
#if increment is >1 then I will save the row before the increment however many times the distance between the two was.
#initial state is set to the first day in "dataset" and all other columns are set to 0 in case there were no cases on the first day of data collection for either of the countries
dayxcurr = data$dayofYear[1]
dayxprev = data$dayofYear[1]
#this will be the initial vector that can be used if there were no positive cases on day 1
#it can be used for both country x and y
initvec <- c(rep(0, 11),first_day)
for (i in 1:length(markercumulativex$day_of_year)){
if (i == 1){
dayxprev = data$dayofYear[1]
}
else{
dayxprev = markercumulativex$day_of_yearx[i-1]
}
dayxcurr = markercumulativex$day_of_yearx[i]
if (dayxcurr != dayxprev){
diff = dayxcurr - dayxprev
if (i == 1){
for (j in 1:diff){
x_totals_by_day[nrow(x_totals_by_day)+1,] <- c(rep(0, 11),(first_day + j - 1))
}
}
else{
for (j in 1:diff){
x_totals_by_day[nrow(x_totals_by_day)+1,] <- markercumulativex[i-1,]
}
}
}
if (i == length(markercumulativex$day_of_year)){
x_totals_by_day[nrow(x_totals_by_day)+1,] <- tail(markercumulativex,1)
}
}
y_totals_by_day <- data.frame("Marker_01_Y" = integer(), "Marker_02_Y" = integer(), "Marker_03_Y" = integer(), "Marker_04_Y" = integer(), "Marker_05_Y" = integer(), "Marker_06_Y" = integer(), "Marker_07_Y" = integer(), "Marker_08_Y" = integer(), "Marker_09_Y" = integer(), "Marker_10_Y" = integer(), "Cumulative_Pos_Y" = integer(), "DayofYear_Y" = integer(), stringsAsFactors = FALSE)
#go from 120-175
#check if it is in day_of_yeary
#or go through each row
#using dayycurr and dayyprev to know when the day increments. I will then save the row before the increment.
#if increment is >1 then I will save the row before the increment however many times the distance between the two was.
#initial state is set to the first day in "dataset" and all other columns are set to 0 in case there were no cases on the first day of data collection for either of the countries
dayycurr = data$dayofYear[1]
dayyprev = data$dayofYear[1]
for (i in 1:length(markercumulativey$day_of_year)){
if (i == 1){
dayyprev = data$dayofYear[1]
}
else{
dayyprev = markercumulativey$day_of_yeary[i-1]
}
dayycurr = markercumulativey$day_of_yeary[i]
if (dayycurr != dayyprev){
diff = dayycurr - dayyprev
if (i == 1){
for (j in 1:diff){
y_totals_by_day[nrow(y_totals_by_day)+1,] <- c(rep(0, 11),(first_day + j - 1))
}
}
else{
for (j in 1:diff){
y_totals_by_day[nrow(y_totals_by_day)+1,] <- markercumulativey[i-1,]
}
}
}
if (i == length(markercumulativey$day_of_year)){
y_totals_by_day[nrow(y_totals_by_day)+1,] <- tail(markercumulativey,1)
}
}
#If there is a gap in day_of_yearx somewhere from 120-175 I need to insert a row in using data from previous row so that there are no gaps in days and so both country x and country y have the same nubmer of rows
head(x_totals_by_day)
tail(x_totals_by_day)
head(y_totals_by_day)
tail(y_totals_by_day)
#Cumulative positive cases for country X will be created next
cum_total_x <- c(x_totals_by_day$Cumulative_Pos_X)
#Cumulative positive cases for country Y will be created next
cum_total_y <- c(y_totals_by_day$Cumulative_Pos_Y)
doy <- c(first_day:last_day)
vector_x = rep.int("x", length(doy))
vector_y = rep.int("y", length(doy))
doy
x_totals_by_day
x_totals_by_day <- cbind(x_totals_by_day,vector_x)
head(x_totals_by_day)
y_totals_by_day <- cbind(y_totals_by_day,vector_y)
head(y_totals_by_day)
colnames(x_totals_by_day) <- c("Marker_01","Marker_02","Marker_03","Marker_04","Marker_05","Marker_06","Marker_07","Marker_08","Marker_09","Marker_10","Cum_Pos","day_of_year","Country")
head(x_totals_by_day)
colnames(y_totals_by_day) <- c("Marker_01","Marker_02","Marker_03","Marker_04","Marker_05","Marker_06","Marker_07","Marker_08","Marker_09","Marker_10","Cum_Pos","day_of_year","Country")
head(y_totals_by_day)
final_df_for_analysis <- rbind(x_totals_by_day, y_totals_by_day)
head(final_df_for_analysis)
tail(x_totals_by_day)
tail(y_totals_by_day)
#clear previous contents
rm(list=ls())
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY")
#"C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project"
file.remove(list.files(pattern = "*.csv"))
#clear previous contents
rm(list=ls())
#set working directory to the folder where allData.csv is contained
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
source("supportingFunctions.R")
library(ggplot2)
library(cowplot)
###From part 1: Use custom function convertdirectorytocsv() to convert all .txt files in countryY directory to .csv files
#Usage: convertdirectorytocsv(directory_containing_country_.txt_files)
convertdirectorytocsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY")
###From part 2:
##use custom function to compile all files in country X database
#Usage: many2onecsv(directory_containing_country_.csv_files, option_on_how_to_handle_NA_values)
#User can select "warn" or "remove" as option for how to deal with NAs in data. Default is "do_nothing"
many2onecsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryX/","do_nothing")
#use custom function to compile all files in country Y database and append them to the compiled data created from country X database
#This function can continued to be called, by replacing the directory name with whatever country has a directory of compiled .csv files
#Usage: many2onecsv(directory_containing_country_.csv_files, option_on_how_to_handle_NA_values)
#User can select "warn" or "remove" as option for how to deal with NAs in data. Default is "do_nothing"
many2onecsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY/","do_nothing")
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
rm(sumview)
sumview
head(summary)
head(summary)
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY")
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
head(summary)
summary<-read.csv("all.csv")
head(summary)
total_screens = nrow(summary)
total_screens
num = 100/50
num
str_count(summary$gender, "male")
sum(summary$gender == "male")
sum(summary$gender == "female")
total_screens
num
malepercent = 100*(male/total_screens)
femalepercent = 100*(male/total_screens)
#User will select the summarized data filename (all.csv), they will need to have their working directory set to the directory with this file
sumview<-function(filename){
summary<-read.csv(filename)
head(summary)
tail(summary)
#Number of screens per run
total_screens = nrow(summary)
return(total_screens)
#create a variable for tracking number of positive cases
totalpos = 0
#code will loop through each row, but only columns that contain markers
#if one of the rows markers contains a 1 it will increment variable and move to the next row
#loop through all rows, if any contain a 1 count it and move to the next row
for(i in 1:nrow(summary)) {
for(j in (which(colnames(summary)=="marker01"):which(colnames(summary)=="marker10"))) {
if (summary[i,j] == 1){
totalpos <- (totalpos + 1)
break
}
}
}
#Percentage of infected patients
p_infected = 100*(totalpos/total_screens)
#Percent of patients that identify as male
male <- sum(summary$gender == "male")
female <- sum(summary$gender == "female")
#male percent
malepercent = 100*(male/total_screens)
femalepercent = 100*(male/total_screens)
return(total_screens)
return(p_infected)
return(malepercent)
return(femalepercent)
}
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
source("supportingFunctions.R")
#set working directory to the folder where allData.csv is contained
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
source("supportingFunctions.R")
#set working directory to the folder where allData.csv is contained
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
source("supportingFunctions.R")
#clear previous contents
rm(list=ls())
#set working directory to the folder where allData.csv is contained
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
source("supportingFunctions.R")
library(ggplot2)
library(cowplot)
###From part 1: Use custom function convertdirectorytocsv() to convert all .txt files in countryY directory to .csv files
#Usage: convertdirectorytocsv(directory_containing_country_.txt_files)
convertdirectorytocsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY")
###From part 2:
##use custom function to compile all files in country X database
#Usage: many2onecsv(directory_containing_country_.csv_files, option_on_how_to_handle_NA_values)
#User can select "warn" or "remove" as option for how to deal with NAs in data. Default is "do_nothing"
many2onecsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryX/","do_nothing")
#use custom function to compile all files in country Y database and append them to the compiled data created from country X database
#This function can continued to be called, by replacing the directory name with whatever country has a directory of compiled .csv files
#Usage: many2onecsv(directory_containing_country_.csv_files, option_on_how_to_handle_NA_values)
#User can select "warn" or "remove" as option for how to deal with NAs in data. Default is "do_nothing"
many2onecsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY/","do_nothing")
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
source("supportingFunctions.R")
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
#set working directory to the folder where allData.csv is contained
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
source("supportingFunctions.R")
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
#clear previous contents
rm(list=ls())
#set working directory to the folder where allData.csv is contained
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
source("supportingFunctions.R")
library(ggplot2)
library(cowplot)
###From part 1: Use custom function convertdirectorytocsv() to convert all .txt files in countryY directory to .csv files
#Usage: convertdirectorytocsv(directory_containing_country_.txt_files)
convertdirectorytocsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY")
###From part 2:
##use custom function to compile all files in country X database
#Usage: many2onecsv(directory_containing_country_.csv_files, option_on_how_to_handle_NA_values)
#User can select "warn" or "remove" as option for how to deal with NAs in data. Default is "do_nothing"
many2onecsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryX/","do_nothing")
#use custom function to compile all files in country Y database and append them to the compiled data created from country X database
#This function can continued to be called, by replacing the directory name with whatever country has a directory of compiled .csv files
#Usage: many2onecsv(directory_containing_country_.csv_files, option_on_how_to_handle_NA_values)
#User can select "warn" or "remove" as option for how to deal with NAs in data. Default is "do_nothing"
many2onecsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY/","do_nothing")
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
head(summary)
total_screens
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
total_screens
v <- c(total_screens,p_infected,malepercent,femalepercent)
#User will select the summarized data filename (all.csv), they will need to have their working directory set to the directory with this file
sumview<-function(filename){
summary<-read.csv(filename)
head(summary)
tail(summary)
#Number of screens per run
total_screens = nrow(summary)
#create a variable for tracking number of positive cases
totalpos = 0
#code will loop through each row, but only columns that contain markers
#if one of the rows markers contains a 1 it will increment variable and move to the next row
#loop through all rows, if any contain a 1 count it and move to the next row
for(i in 1:nrow(summary)) {
for(j in (which(colnames(summary)=="marker01"):which(colnames(summary)=="marker10"))) {
if (summary[i,j] == 1){
totalpos <- (totalpos + 1)
break
}
}
}
#Percentage of infected patients
p_infected = 100*(totalpos/total_screens)
#Percent of patients that identify as male
male <- sum(summary$gender == "male")
female <- sum(summary$gender == "female")
#male percent
malepercent = 100*(male/total_screens)
femalepercent = 100*(male/total_screens)
v <- c(total_screens,p_infected,malepercent,femalepercent)
return(v)
}
source("supportingFunctions.R")
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
total_screens
#clear previous contents
rm(list=ls())
#set working directory to the folder where allData.csv is contained
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
source("supportingFunctions.R")
library(ggplot2)
library(cowplot)
###From part 1: Use custom function convertdirectorytocsv() to convert all .txt files in countryY directory to .csv files
#Usage: convertdirectorytocsv(directory_containing_country_.txt_files)
convertdirectorytocsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY")
###From part 2:
##use custom function to compile all files in country X database
#Usage: many2onecsv(directory_containing_country_.csv_files, option_on_how_to_handle_NA_values)
#User can select "warn" or "remove" as option for how to deal with NAs in data. Default is "do_nothing"
many2onecsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryX/","do_nothing")
#use custom function to compile all files in country Y database and append them to the compiled data created from country X database
#This function can continued to be called, by replacing the directory name with whatever country has a directory of compiled .csv files
#Usage: many2onecsv(directory_containing_country_.csv_files, option_on_how_to_handle_NA_values)
#User can select "warn" or "remove" as option for how to deal with NAs in data. Default is "do_nothing"
many2onecsv("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY/","do_nothing")
###From part 3:
#Use a custom function to summarize compiled data in newly created all.csv file
#After running part 2 above, user's current working directory should be directory containing all.csv file
#The user will need to input the file name of the data they want to summarize and will need to be in the correct working directory
#Usage: sumview(data_file_name_of_data_want_summary_for)
sumview("all.csv")
summary<-read.csv(filename)
head(summary)
tail(summary)
summary<-read.csv(all.csv)
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project")
summary<-read.csv(all.csv)
setwd("C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project/countryY")
#"C:/Users/jwmag/OneDrive/Desktop/Intro_to_biocomputing/Final_Project/Biocomputing-Final-Project"
file.remove(list.files(pattern = "*.csv"))
