install.packages(c("ggplot2", "dplyr"))
install.packages(c("dplyr", "ggplot2"))
data("ChickWeight")
glimpse(ChickWeight)
glimpse(ChickWeight)
library(pillar)
library(pillar)
data("ChickWeight")
glimpse(ChickWeight)
library(dplyr)
library(ggplot2)
View(ChickWeight)
View(ChickWeight)
x = 5
x = 5 #creating an x-variable
x = 8 #creating an x-variable
eye_color = 5
# R is case-sensitive (uppercase/lowercase)
x+5
rm(x) #to remove x
x+5
dim(ChickWeight)
ncol(ChickWeight)
num_vec = c(4, 7, 0.9)
num_vec[1]
num_vec[1:2]
num_vec[c(1,3)]
num_vec[1:4]
char_list = c('happy', 'birthday')
length(num_vec)
y = c("17", "19", "7", 9)
y = c("17 ", "17", "19", "7", 9)
unique(y)
as.numeric (y)
unique(y)
unique(as.numeric(y))
View(ChickWeight)
x<-"Faith"
y<-"not faith"
rm(char_list)
rm(num_vec)
rm(eye_color)
x<-"Faith"
y<-"not faith"
library(ggplot2)
head(mpg)
ggplot(data=mpg,aes(x=year,y=displ))+geom_point()
ggplot(data=mpg,aes(x=year,y=displ))+geom_point()+theme_classic
ggplot(data=mpg,aes(x=year,y=displ))+geom_point()+theme_classic()
ggplot(mpg, aes(x = cyl)) +
geom_bar() +
theme_bw() +
xlab("Cylinders") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
##histogram
ggplot(mpg, aes(x = displ)) +
geom_bar() +
theme_bw() +
xlab("Cylinders") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
##histogram
ggplot(mpg, aes(x = displ)) +
geom_bar() +
theme_bw() +
xlab("Engine size") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
ggplot(data=mpg,aes(x=displ))+geom_histogram()
##histogram
##minimum call:
ggplot(data=mpg,aes(x=displ))+geom_histogram(fill='magenta') + theme_classic() + xlab("engine displacement")
##scatterplot
ggplot(data=mpg, aes(x=displ,y=cty))+geom_point()
ggplot(data=mpg, aes(x=displ,y=cty))+geom_point()
ggplot(data=mpg, aes(x=displ, y=cty, fill=cyl))+geom_point(shape=22) + theme_classic()
##scatterplot
ggplot(data=mpg, aes(x=displ, y=cty, fill=as.factor(cyl)))+geom_point(shape=22) + theme_classic()
ggplot(data=mpg, aes(x = cyl, y = displ)) +
geom_boxplot() +
xlab("Car cylinders") +
ylab("engine displacement")
ggplot(data=mpg, aes(x = displ, y = cyl)) +
geom_boxplot() +
xlab("Car cylinders") +
ylab("engine displacement")
ggplot(data=mpg, aes(x = cyl, y = displ)) +
stat_summary(geom="bar", fun.y="mean") +
stat_summary(geom="errorbar", fun.data = "mean_se", width=0.3) +
xlab("Car cylinders") +
ylab("engine displacement")
##bar plot - mean engine displ for different cylinders with error bars
ggplot(data=mpg, aes(x = cyl, y = displ)) +
stat_summary(geom="bar", fun.y="mean") +
stat_summary(geom="errorbar", fun.data = "mean_se", width=0.3) +
xlab("Car cylinders") +
ylab("engine displacement") +
themebw()
##bar plot - mean engine displ for different cylinders with error bars
ggplot(data=mpg, aes(x = cyl, y = displ)) +
stat_summary(geom="bar", fun.y="mean") +
stat_summary(geom="errorbar", fun.data = "mean_se", width=0.3) +
xlab("Car cylinders") +
ylab("engine displacement") +
theme_bw()
ggplot(data=mpg, aes(x = cyl, y = displ)) +
stat_summary(geom="bar", fun.y="mean") +
stat_summary(geom="errorbar", fun.data = "mean_se", width=0.3) +
xlab("Car cylinders") +
ylab("engine displacement") +
theme_bw()
ggplot(data=iris)+geom_density(aes(x=Sepal.Width, color=Species))+theme_classic()
ggplot(data=iris)+geom_density(aes(x=Sepal.Width, color=Species))+theme_classic()
ggplot(data=mpg, aes(x = cyl, y = displ)) +
stat_summary(geom="bar", fun.y="mean") +
stat_summary(geom="errorbar", fun.data = "mean_se", width=0.3) +
xlab("Car cylinders") +
ylab("engine displacement") +
theme_bw()
letters <- c('A','B','C','D')
for (i in letters){
print(i)
}
letters <- c('A','B','C','D')
for (i in 1:length (letters)){
print(letters[i])
}
input <- matrix(1:8,nrow=4,ncol=2)
input
for (i in input){
print(i+i)
}
for (i in 1:length (input)){
print(input[i])
}
for (i in 1:length (input)){
print(input[i]+i)
}
for (i in 1:length (input)){
print(input[,1]+input[,2])
}
or (i in 1:length (input)){
print(sum(input[i,]))
}
for (i in 1:length (input)){
print(sum(input[i,]))
}
output2 <- numeric(4)
for (i in 1:nrow(input)){
output2[i] <- sum(input[i,])
}
output2
vec <- c(3,10,4,12,55)
vec
for (x in vec){
print(sum(vec+i))
}
output3 <- numeric(5)
for (x in vec){
output3[x] <- (sum(vec+x))
}
output3
for (x in 1:nrow(vec)){
output3[x] <- (sum(vec+x))
}
output3
output3 <- numeric(5)
for (x in 1:nrow(vec)){
output3[x] <- (sum(vec+x))
}
for (x in 1:length(vec)){
output3[x] <- (sum(vec+x))
}
output3
for (x in 1:length(vec)){
output3[x] <- (sum(v[1:x]))
}
outp
for (x in 1:length(vec)){
output3[x] <- (sum(v[1:x]))
}
output3
for (x in 1:length(vec)){
output3[x] <- (sum(vec[1:x]))
}
output3
vec <- c(3,10,4,12,NA, 55)
output3
vec <- c(3,10,4,12, NA, 55)
output3 <- numeric(6)
for (x in 1:length(vec)){
output3[x] <- (sum(vec[1:x]))
}
output3
vec <- c(3,10,4,12, "NA", 55)
output3 <- numeric(6)
for (x in 1:length(vec)){
output3[x] <- (sum(vec[1:x]))
}
output3
vec <- c(3,10,4,12,55)
output3 <- numeric(5)
for (x in 1:length(vec)){
output3[x] <- (sum(vec[1:x]))
}
output3
vec0 <- vec[is.na(vec)]
vec0 <- vec[!is.na(vec)]
vec0
vec0 <- vec[!is.na(vec)] ##using the ! makes it so that it is false: == is true, != is false
vec0
##new challenge: to calculate 1, 1+2, 1+2+3, ... from the vector
vec <- c(3,10,4,NA,55)
output3 <- numeric(5)
for (x in 1:length(vec)){
output3[x] <- (sum(vec[1:x]))
}
output3
vec0 <- vec[!is.na(vec)] ##using the ! makes it so that it is false: == is true, != is false
vec0
##new challenge: to calculate 1, 1+2, 1+2+3, ... from the vector
vec <- c(3,10,4,NA,55)
output3 <- numeric(5)
for (x in 1:length(vec)){
output3[x] <- (sum(vec[1:x], na.rm=TRUE))
}
output3
for (i in 1:10){
guess <- as.numeric(readline("Guess: "))
if (guess > random_number){
print ("lower!")
}else if (guess < random_number){
print ("higher!")
}else if (guess == random_number){
print ("correct!")
}else if (i ==10){
print ("Sorry, too many guesses. Try again later!")
}
}
random_number <- sample(1:100,1)
for (i in 1:10){
guess <- as.numeric(readline("Guess: "))
if (guess > random_number){
print ("lower!")
}else if (guess < random_number){
print ("higher!")
}else if (guess == random_number){
print ("correct!")
}else if (i ==10){
print ("Sorry, too many guesses. Try again later!")
}
}
56
for (i in 1:10){
guess <- as.numeric(readline("Guess: "))
if (guess > random_number){
print ("lower!")
}else if (guess < random_number){
print ("higher!")
}else if (guess == random_number){
print ("correct!")
break
}else if (i ==10){
print ("Sorry, too many guesses. Try again later!")
}
}
23
for (i in 1:10){
guess <- as.numeric(readline("Guess: "))
if (guess > random_number){
print ("lower!")
}else if (guess < random_number){
print ("higher!")
}else if (guess == random_number){
print ("correct!")
break
}if (i ==10){
for (i in 1:10){
guess <- as.numeric(readline("Guess: "))
if (guess > random_number){
print ("lower!")
}else if (guess < random_number){
print ("higher!")
}else if (guess == random_number){
print ("correct!")
}if (i ==10){
for (i in 1:10){
guess <- as.numeric(readline("Guess: "))
if (guess > random_number){
print ("lower!")
}else if (guess < random_number){
print ("higher!")
}else if (guess == random_number){
print ("correct!")
} if (i ==10){
for (i in 1:10){
guess <- as.numeric(readline("Guess: "))
if (guess > random_number){
print ("lower!")
}else if (guess < random_number){
print ("higher!")
}else if (guess == random_number){
print ("correct!")
}
if (i ==10){
print ("Sorry, too many guesses. Try again later!")
}
}
race <- c(3, 4, 5)
sprint <- c(9, 8, 7)
mile <- 1.60932 km
x <- c(3, 4, 5)
m2miles <- function(x){
vec <- sort (x, decreasing =FALSE)
New <- vec[1]/1.60932
return (new)
}
miles2km <- function(x){
vec <- sort(x, decreasing = FALSE)
Newer <- vec[1] * 1.60932
return (Newer)
}
direction <- function(x, direction ="miles2km")
if route == "miles2km"{
direction <- function(x, direction ="miles2km"){
if route == "miles2km"{
route <- ("miles2km")
x <- 3.1
direction <- function(x, direction ="miles2km"){
if route == "miles2km"{
route <- ("miles2km")
x <- 3.1
direction <- function(x, direction ="miles2km"){
if route == "miles2km"{
route <- ("miles2km")
x <- 3.1
direction <- function(x, direction == "miles2km"){
avg <-function(x, irisPBI == "nothing") {
avg <-function(x, irisPBI == "nothing") {
avg <-function(x, irisPBI == "nothing") {
avg <-function(x, irisPBI == "iris.csv") {
avg <-function(x, irisPBI = "iris.csv") {
if iris$Species == "virginica"{
avg <-function("iris.csv") {
avg <-function(iris.csv) {
if iris$Species == "virginica"{
PBI <-function(measure_species) {
if iris$Species == "virginica"{
##calculating PBI for each species in the data set:
iris.csv
##calculating PBI for each species in the data set:
getwd()
setwd("/Users/faithschafer/Downloads")
iris.csv
read("iris.csv")
read.csv("iris.csv")
PBI <-function(measure_species) {
if iris$Species == "virginica"{
PBI <-function(measure, species) {
if (Species == "virginica"){
PBI calc <- 4*measures$Petal.Length-8
getwd()
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project")
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryY")
place <- function(location, place == "countryY"){
place <- function(location, place == "countryY"){
place <- function(location, place == "countryY"){
place <- function(location, place == "countryY"){
place <- function(location, place == "countryY"){
place <- function(location, country=="countryY"){
place <- function(location, country=="countryY"){
place <- function(location, country=="countryY"){
place <- function(location, country=="countryY"){
place <- function(location, country="countryY"){
if (country=="countryY"){
location==("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryY")
}else if (country=="countryX"){
location==("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryX")
}
}
countryY
country <- "countryX"
setwd()
place(country="countryX")
place <- function(country="countryY"){
if (country=="countryY"){
location==("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryY")
}else if (country=="countryX"){
location==("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryX")
}
}
place(country="countryX")
place(country="countryY")
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryY")
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryX")
filelist = list.files(pattern = ".txt")
for (i in 1:length(filelist)){
input<-filelist[i]
output<-paste0(input, ".csv")
data = read.delim(input, header = TRUE)
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryX")
write.table(data, file=output, sep=",", col.names=TRUE, row.names=FALSE)
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryX")
}
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryX")
filelist = list.files(pattern = ".txt")
for (i in 1:length(filelist)){
input<-filelist[i]
output<-paste0(input, ".csv")
data = read.delim(input, header = TRUE)
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryX")
write.table(data, file=output, sep=",", col.names=TRUE, row.names=FALSE)
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryX")
}
filelist = list.files(pattern = ".txt")
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryY")
filelist = list.files(pattern = ".txt")
for (i in 1:length(filelist)){
input<-filelist[i]
output<-paste0(input, ".csv")
data = read.delim(input, header = TRUE)
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryY")
write.table(data, file=output, sep=",", col.names=TRUE, row.names=FALSE)
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryY")
}
output <- paste0(gsub("\\.txt$", "", input), ".csv")
output <- paste0(gsub("\\.txt$", "", input), ".csv")
setwd("/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryY")
output <- paste0(gsub("\\.txt$", "", input), ".csv")
write.table(filelist,file=paste0("",sub(".txt","/Users/faithschafer/Downloads/Biocomputing-Final-Project/countryY",filelist[i]),".csv"),row.names=F,colnames=T,quote=F,sep=",")
