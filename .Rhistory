# set workng directory & save path
setwd("C:/Users/student/Desktop/Notre Dame/Fall 23/Biocomp/Biocomputing-Final-Project")
directpath = getwd()
# loading functions
source("supportingFunctions.R")
# converting txt files to csv files
txt2csv(directpath)
# compiling txt files into one
mergecsv(directpath)
## usage: argument is the directory path to where the csv files are nested in
## output: will combine and save csv files into one file named "all.csv" or "all_noNA.csv"
##         also provides global variable called "allcsv" that is the combined csv dataset
## includes user input to choose between 3 options for handling NA's in data
mergecsv <- function(directory) {
# storing all the csv files into a placeholder
csvfiles <- list.files(directory, recursive = TRUE, pattern = "^[screen].*csv$")
# initializing variables to use in function
country <- c()
DayOfYear <- c()
# nested function to create the country and DayOfYear variables to add to the compiled csv file
countryandday <- function(input) {
# initialize the variables
separate <- c()
countryonly <- c()
dayonly <- c()
# for loop to iterate through each csv file
for (i in 1:length(input)) {
# separating the country from the day of the year
separate[i] <- strsplit(input[[i]], split = "/")
# getting only the country and separating each character
countryonly <- unlist(strsplit(unlist(separate[[i]])[1], split = ""))
# getting the day of the year
dayonly <- strsplit(unlist(separate[[i]])[2], split = "\\.")
# getting the number of rows of each file
num = nrow(read.csv(input[i], header = TRUE))
# number of times to repeat the country/day for each file to correspond to every patient
countryrepetition <- rep(countryonly[[8]], num)       # country by taking the last character of the string
dayrepetition <- rep(gsub("\\D", "", dayonly), num)   # day of the year by only taking the digit values
# placing the country (X or Y) into the country variable
country <<- append(country, countryrepetition)
# placing the day of year into the DayOfYear variable
DayOfYear <<- append(DayOfYear, dayrepetition)
}
}
# running the countryandday function to get the country and DayOfYear variables
countryandday(csvfiles)
# initialize variables to iterate while combinind csv files into a single data file
toadd <- c()
all <- c()
# for loop to iterate through each file and compile it
for (i in seq_along(csvfiles)) {
# for the first file, making it start the compiled file
if (i == 1) {
compiled <- read.csv(csvfiles[i], header = TRUE)
}
# for every file after, adding it to the running file compilation
else {
toadd <- read.csv(csvfiles[i], header = TRUE)
compiled <- rbind(compiled, toadd)
}
}
# adding the country and day of year variables to the compiled data, then assigning as a variable
all <- cbind(compiled, country, DayOfYear)
answer <- menu(c("Remove any rows with NA", "Include NA, but provide warning", "Include NA; no warning"),
title="How would you like to compile the .csv files?")
if (answer == 1) {
all_noNA <- na.omit(all)
write.csv(all_noNA, file = "all_noNA.csv", row.names = FALSE)
return(allcsv <<- all_noNA)
}
else if (answer == 2) {
write.csv(all, file = "all.csv", row.names = FALSE)
warning("The dataset contains NA values.")
return(allcsv <<- all)
}
else {
write.csv(all, file = "all.csv", row.names = FALSE)
return(allcsv <<- all)
}
}
# compiling txt files into one
mergecsv(directpath)
class(compiled)
# clearing environment
rm(list = ls(all.names = TRUE))
# storing all the csv files into a placeholder
csvfiles <- list.files(directory, recursive = TRUE, pattern = "^[screen].*csv$")
# function to compile all .csv files in a directory into a single .csv file
## set working directory
setwd("C:/Users/student/Desktop/Notre Dame/Fall 23/Biocomp/working final")
## saving the path as the set working directory
directpath = getwd()
# storing all the csv files into a placeholder
csvfiles <- list.files(directory, recursive = TRUE, pattern = "^[screen].*csv$")
# storing all the csv files into a placeholder
csvfiles <- list.files(directpath, recursive = TRUE, pattern = "^[screen].*csv$")
# initializing variables to use in function
country <- c()
DayOfYear <- c()
# initialize the variables
separate <- c()
countryonly <- c()
dayonly <- c()
for (i in 1:length(csvfiles)) {
# separating the country from the day of the year
separate[i] <- strsplit(csvfiles[[i]], split = "/")
# getting only the country and separating each character
countryonly <- unlist(strsplit(unlist(separate[[i]])[1], split = ""))
# getting the day of the year
dayonly <- strsplit(unlist(separate[[i]])[2], split = "\\.")
# getting the number of rows of each file
num = nrow(read.csv(csvfiles[i], header = TRUE))
# number of times to repeat the country/day for each file to correspond to every patient
countryrepetition <- rep(countryonly[[8]], num)       # country by taking the last character of the string
dayrepetition <- rep(gsub("\\D", "", dayonly), num)   # day of the year by only taking the digit values
# placing the country (X or Y) into the country variable
country <<- append(country, countryrepetition)
# placing the day of year into the DayOfYear variable
DayOfYear <<- append(DayOfYear, dayrepetition)
# for loop to iterate through each csv file
for (i in 1:length(csvfiles)) {
# separating the country from the day of the year
separate[i] <- strsplit(csvfiles[[i]], split = "/")
# getting only the country and separating each character
countryonly <- unlist(strsplit(unlist(separate[[i]])[1], split = ""))
# getting the day of the year
dayonly <- strsplit(unlist(separate[[i]])[2], split = "\\.")
# getting the number of rows of each file
num = nrow(read.csv(csvfiles[i], header = TRUE))
# number of times to repeat the country/day for each file to correspond to every patient
countryrepetition <- rep(countryonly[[8]], num)       # country by taking the last character of the string
dayrepetition <- rep(gsub("\\D", "", dayonly), num)   # day of the year by only taking the digit values
# placing the country (X or Y) into the country variable
country <<- append(country, countryrepetition)
# placing the day of year into the DayOfYear variable
DayOfYear <<- append(DayOfYear, dayrepetition)
}
# initialize variables to iterate while combinind csv files into a single data file
toadd <- c()
all <- c()
# for loop to iterate through each file and compile it
for (i in seq_along(csvfiles)) {
# for the first file, making it start the compiled file
if (i == 1) {
compiled <- read.csv(csvfiles[i], header = TRUE)
}
# for every file after, adding it to the running file compilation
else {
toadd <- read.csv(csvfiles[i], header = TRUE)
compiled <- rbind(compiled, toadd)
}
}
View(toadd)
# initialize variables to iterate while combinind csv files into a single data file
toadd <- c()
all <- c()
# for loop to iterate through each file and compile it
for (i in seq_along(csvfiles)) {
# for the first file, making it start the compiled file
if (i == 1) {
compiled <- read.csv(csvfiles[i], header = TRUE)
}
# for every file after, adding it to the running file compilation
else {
toadd <- read.csv(csvfiles[i], header = TRUE)
compiled <- rbind(compiled, toadd)
}
}
# storing all the csv files into a placeholder
csvfiles <- list.files(directpath, recursive = TRUE, pattern = "^[screen].*csv$")
# for loop to iterate through each file and compile it
for (i in seq_along(csvfiles)) {
# for the first file, making it start the compiled file
if (i == 1) {
compiled <- read.csv(csvfiles[i], header = TRUE)
}
# for every file after, adding it to the running file compilation
else {
toadd <- read.csv(csvfiles[i], header = TRUE)
compiled <- rbind(compiled, toadd)
}
}
View(toadd)
# set workng directory & save path
setwd("C:/Users/student/Desktop/Notre Dame/Fall 23/Biocomp/Biocomputing-Final-Project")
directpath = getwd()
# compiling txt files into one
mergecsv(directpath)
directpath = getwd()
# compiling txt files into one
mergecsv(directpath)
# loading functions
source("supportingFunctions.R")
# compiling txt files into one
mergecsv(directpath)
View(allcsv)
# compiling txt files into one
mergecsv(directpath)
# performing data summary
datasummary(allcsv)
# creating plots
countryplots(allcsv)
# creating plots
countryplots(allcsv)
# clearing environment
rm(list = ls(all.names = TRUE))
# clearing environment
rm(list = ls(all.names = TRUE))
# loading necessary packages
library(tidyverse)
library(gridExtra)
# set workng directory & save path
setwd("C:/Users/student/Desktop/Notre Dame/Fall 23/Biocomp/Biocomputing-Final-Project")
directpath = getwd()
directpath = getwd()
# converting txt files to csv files
txt2csv(directpath)
# loading functions
source("supportingFunctions.R")
# converting txt files to csv files
txt2csv(directpath)
# compiling txt files into one
mergecsv(directpath)
# set workng directory & save path
setwd("C:/Users/student/Desktop/Notre Dame/Fall 23/Biocomp/Biocomputing-Final-Project")
directpath = getwd()
directpath = getwd()
# storing all the csv files into a placeholder
csvfiles <- list.files(directpath, recursive = TRUE, pattern = "^[screen].*csv$")
list.files(directpath, recursive = TRUE, pattern = "^[screen].*csv$")
# loading functions
source("supportingFunctions.R")
# loading necessary packages
library(tidyverse)
library(gridExtra)
# converting txt files to csv files
txt2csv(directpath)
# compiling txt files into one
mergecsv(directpath)
# performing data summary
datasummary(allcsv)
# creating plots
countryplots(allcsv)
# loading functions
source("supportingFunctions.R")
# clearing environment
rm(list = ls(all.names = TRUE))
# set workng directory & save path
setwd("C:/Users/student/Desktop/Notre Dame/Fall 23/Biocomp/Biocomputing-Final-Project")
directpath = getwd()
directpath = getwd()
# loading functions
source("supportingFunctions.R")
# compiling txt files into one
mergecsv(directpath)
# performing data summary
datasummary(allcsv)
# creating plots
countryplots(allcsv)
# Incidence graph
incidence <- alldata %>%
# selecting screens that indicate infection
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) +
geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
# Incidence graph
incidence <- allcsv %>%
# selecting screens that indicate infection
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) +
geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
# Incidence graph
incidence <- allcsv %>%
# selecting screens that indicate infection
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) +
geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
View(incidence)
allcsv %>%
# selecting screens that indicate infection
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) +
geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
rlang::last_trace()
setwd("C:/Users/student/Desktop/Notre Dame/Fall 23/Biocomp/working final")
alldata <- read.csv("allData.csv")
library(tidyverse)
# Incidence graph
alldata %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = dayofYear)) + geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
alldata <- read.csv("all.csv")
# Incidence graph
alldata %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) + geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
View(alldata)
# clearing environment
rm(list = ls(all.names = TRUE))
# set workng directory & save path
setwd("C:/Users/student/Desktop/Notre Dame/Fall 23/Biocomp/Biocomputing-Final-Project")
directpath = getwd()
# loading functions
source("supportingFunctions.R")
# converting txt files to csv files
txt2csv(directpath)
# compiling txt files into one
mergecsv(directpath)
# performing data summary
datasummary(allcsv)
# creating plots
countryplots(allcsv)
# Incidence graph
alldata %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) + geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
# Incidence graph
allcsv %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) + geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
# Incidence graph
allcsv %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) + geom_bar(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
# Incidence graph
allcsv %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) + geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
# Incidence graph
allcsv %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) + geom_bar(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
# Incidence graph
allcsv %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) +
geom_bar(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country")) +
theme(axis.text.x = element_text(angle = 45))
# Incidence graph
allcsv %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) +
geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country")) +
theme(axis.text.x = element_text(angle = 45))
# Incidence graph
allcsv %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) +
geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65, stat = "count") +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
# Incidence graph
allcsv %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = DayOfYear)) +
geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65, stat = "count", binwidth = 30) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
class(allcsv$DayOfYear)
# Incidence graph
allcsv %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = as.numeric(DayOfYear))) +
geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65, stat = "count", binwidth = 30) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
# Incidence graph
allcsv %>%
filter(rowSums(.[, 3:12]) >= 1) %>%
ggplot(., aes(x = as.numeric(DayOfYear))) +
geom_histogram(na.rm = TRUE, aes(group = country, fill = country, color = country),
position = "identity", alpha = 0.65) +
scale_fill_brewer(palette = "Dark2") + scale_color_brewer(palette = "Dark2") + theme_bw() +
labs(title = "Incidence of Disease") + xlab("Day of the Year") + ylab("Case Counts") +
guides(fill = guide_legend(title = "Country"), color = guide_legend(title = "Country"))
# loading functions
source("supportingFunctions.R")
# set workng directory & save path
setwd("C:/Users/student/Desktop/Notre Dame/Fall 23/Biocomp/Biocomputing-Final-Project")
directpath = getwd()
# creating plots
countryplots(allcsv)
