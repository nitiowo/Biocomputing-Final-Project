getwd()
# use read.table() to read data of .txt format
baseball <- read.table("baseball2011.txt", header=T)
# data is a csv file
?read.csv
# option 2: instead of setting wd, just define full path
baseball <- read.table("C:/Users/laurenlatimer/Stat-Methods/basebal2011.txt", header=T)
# look at data by calling variable
baseball
#or
View(baseball)
# option 2: instead of setting wd, just define full path
baseball <- read.table("C:/Users/laurenlatimer/Stat-Methods/basebal2011.txt", header=T)
# option 2: instead of setting wd, just define full path
baseball <- read.table("C:/Users/laurenlatimer/Stat-Methods/basebal2011.txt", header=T)
# look at data by calling variable
baseball
# option 2: instead of setting wd, just define full path
baseball <- read.table("C:/Users/laurenlatimer/Stat-Methods/basebal2011.txt", header=T)
# define a vector x. x contains 2, 4, 6, and 8.
x <- c(2,4,6,8)
# compute the mean and st dev of x
mean(x)
sd(x)
# read from files
# set directory
setwd("C:/Users/laurenlatimer/Stat-Methods")
# return the 4th element of x
x[4]
# check directory
getwd()
# option 2: instead of setting wd, just define full path
baseball <- read.table("C:/Users/laurenlatimer/Stat-Methods/basebal2011.txt", header=T)
source("~/Stat-Methods/Lab 0.R", echo=TRUE)
# Check the current working directory.
current_dir <- getwd()
# Set the working directory.
setwd("C:/Users/laurenlatimer/Stat-Methods")
# Set the working directory.
setwd("C:/Users/laurenlatimer/Downloads")
# Set the working directory.
setwd("C:/Users/laurenlatimer")
# Use read.table() to read data from a .txt file (assuming "baseball2011.txt" is correct).
baseball <- read.table("baseball2011.txt", header = TRUE)
# Use read.table() to read data from a .txt file (assuming "baseball2011.txt" is correct).
baseball <- read.table("baseball2011.txt", header = TRUE)
# Look at the data by printing the variable.
print(baseball)
# Or use View() to open a data viewer.
View(baseball)
# Or use View() to open a data viewer.
view(baseball)
Team
View(Team)
View("Team")
# This is equivalent to baseball[, 1].
baseball[4]
baseball[,4]
1-pnorm(99.7, 98.6, 0.4)
pnorm(99.2,98.6,0.4) - pnorm(98.1, 98.6, 0.4)
qnorm(0.35, 98.6, 0.4)
sd(c(98.3, 98.4, 99.0, 98.9))
1 - pnorm(98.4, 98.6, 0.4/sqrt(12))
0.4/sqrt(12)
install.packages("glmbb")
library(glmbb)
data(crabs)
hist(crabs$width, main= "Histogram of Carapace Widths", xlab= "Widths(cm)")
hist(crabs$width, main= "Histogram of Carapace Widths", xlab= "Widths(cm)", breaks=20)
cram_mean
mean(crabs)
crab_mean - qnorm(0.95, 0, 1)*crab_sd/sqrt(173)
crabs_mean
crabs_mean = mean(crabs)
knitr::opts_chunk$set(echo = TRUE)
hist(crabs$width, main = "Histogram of Carapace Widths", xlab = "Widths (cm)")
crab_mean
# lowerbound of 90% confidence interval
crab_mean - qnorm(.95,0,1)*crab_sd/sqrt(173)
View(crabs)
crab_mean = mean(crabs$width)
crab_mean = mean(crabs$width)
crab_sd = sd(crabs$width)
# lowerbound of 90% confidence interval
crab_mean - qnorm(.95,0,1)*crab_sd/sqrt(173)
crab_mean + qnorm(.95,0,1)*crab_sd/sqrt(173)
qt(0.95,df=173-1)
?t.test
t.test(crabs$width, alternative = 'less', mu = 28, conf.level = 0.99)
getwd()
Auto <- read.csv("Auto.csv")
Auto <- read.csv("Auto.csv")
hist(Auto$Cost, main = "Hudson Auto Repair Parts Cost", xlab = "Cost ($)", breaks = 5)
mean(Auto$Cost)
std(Auto$Cost)
sd(Auto$Cost)
t.test(Auto$Cost, alternative = 'greater', mu = 75.5, conf.level = 0.95)
Use the t score
qt(0.9, 9)
-------
Use the t score
qt(0.05, 9)
-------
pnorm
pnorm(105,100,16)
knitr::opts_chunk$set(echo = TRUE)
install.packages('faraway')
library(faraway)
install.packages("faraway")
install.packages("faraway")
install.packages("faraway")
install.packages("faraway")
Yes
knitr::opts_chunk$set(echo = TRUE)
install.packages('faraway')
library(faraway)
install.packages("faraway")
# fit the lm model
?lm()
punt.regress <- lm(punting$Distance ~ punting$RFlex)
punt.regress
# fit the lm model
?lm()
punt.regress <- lm(punting$Distance ~ punting$RFlex)
install.packages('faraway')
library(faraway)
summary(punt.regress)
beta1_hat<-2.6871
beta1_se<-0.5943
t<-qt(0.05,11)
beta1_hat - t*beta1_se
beta1_hat + t*beta1_se
summary(punt.regress)
r_square<-0.6502
r <- sqrt(r_square)
install.packages('faraway')
library(faraway)
install.packages('faraway')
library(faraway)
install.packages('lme4')
library(faraway)
install.packages('faraway')
library(faraway)
?plot
plot(punting$RFlex, punting$Distance, xlab="", ylab="Distance", main="Title")
punt.regress <- lm(punting$Distance ~ punting$RFlex)
# fit the lm model
?lm()
punt.regress <- lm(punting$Distance ~ punting$RFlex)
# create the scatterplot
plot(punting$RFlex, punting$Distance, xlab = "Right Hamstring Flexibility (10 punts)")
# add the regression line
abline(punt.regress)
qnorm(0.05, 1.13, 2.21)
qnorm(0.005, 1.13, 2.21)
qt(0.025, 5)
y <-c(0.95, 0.83, 1.2, 0.89, 1.45, 1.12)
mean(y)
var(y)
x <-c(25,23,21,21,20)
mean(x)
var(x)
pt(7.826, 4)
qt(0.995, 4)
x[1:3,]
x[3]
x[1:4]
x[,1:4]
setwd('/Users/laurenlatimer/Biocomputing/Biocomputing-Final-Project')
all.data <- read.csv("allData.csv", header=TRUE)
# convert .txt files in a directory to .csv
convert_to_csv <- function(input_directory){
txt_files <- list.files(path = input_directory, pattern = "\\.txt$", full.names = TRUE)
for (file in txt_files){
data <- read.table(file, header = TRUE, sep = "\t")
csv_name <- sub("\\.txt$", ".csv", file)
write.csv(data, csv_name, row.names = FALSE)
file.remove(file)
}
}
print(all.data)
num_screens <- nrow(all.data)
infections <- rep(0, num_screens)
for (i in infections) {}
for (i in infections) {}
for (i in 1:num_screens) {
for (j in 3:12) {
if(all.data[i, j] == 1) {
infections[i] <- 1
break
}
done
exit()
table(all.data$age)
}
}
table(all.data$age)
ggplot(all.data, aes(x = Age)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Age Distribution",
x = "Age",
y = "Frequency")
library(ggplot2)
ggplot(all.data, aes(x = Age)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Age Distribution",
x = "Age",
y = "Frequency")
ggplot(all.data, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Age Distribution",
x = "Age",
y = "Frequency")
ggplot(all.data, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = "Age Distribution",
x = "Age",
y = "Frequency")
analyze_data(all.data)
analyze_data <- function(data_file) {
all_data <- read.csv(data_file, header=TRUE)
# find the number of screenings run
num_screens <- nrow(all_data)
# create column where 1 indicates infection and 0 indicates no infection
# initialize list of length(num_screens)
infected <- rep(0, num_screens)
#iterate over each row and column to determine if marker is present for each screen
for (i in 1:num_screens) {
for (j in 3:12) {
if(all_data[i, j] == 1) {
infected[i] <- 1
break
}
}
}
# find percentage of screens that indicate infection
percent_infected <- (sum(infected) / num_screens) * 100
# find percentage of patients by gender identity
percent_male <- (sum(all_data$gender == "male") / num_screens) * 100
percent_female <- (sum(all_data$gender == "female") / num_screens) * 100
# create an age distribution plot
age_dist <- ggplot(all_data, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = "Age Distribution",
x = "Age",
y = "Frequency")
# print information
cat("Summary of Analysis: \n")
cat("Number of screens run:", num_screens, "\n")
cat("Percentage of patients screened that were infected:", percent_infected, "%\n")
cat("Percentage of patients that identified as male:", percent_male, "%\n")
cat("Percentage of patients that identified as female:", percent_female, "%\n")
}
analyze_data(all.data)
setwd('/Users/laurenlatimer/Biocomputing/Biocomputing-Final-Project')
analyze_data('allData.csv')
# print information
cat("Summary: \n")
analyze_data <- function(data_file) {
all_data <- read.csv(data_file, header=TRUE)
# find the number of screenings run
num_screens <- nrow(all_data)
# create column where 1 indicates infection and 0 indicates no infection
# initialize list of length(num_screens)
infected <- rep(0, num_screens)
#iterate over each row and column to determine if marker is present for each screen
for (i in 1:num_screens) {
for (j in 3:12) {
if(all_data[i, j] == 1) {
infected[i] <- 1
break
}
}
}
# find percentage of screens that indicate infection
percent_infected <- (sum(infected) / num_screens) * 100
# find percentage of patients by gender identity
percent_male <- (sum(all_data$gender == "male") / num_screens) * 100
percent_female <- (sum(all_data$gender == "female") / num_screens) * 100
# create an age distribution plot
age_dist_hist <- ggplot(all_data, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = "Age Distribution",
x = "Age",
y = "Frequency")
# print information
cat("Summary: \n")
cat("Number of screens run:", num_screens, "\n")
cat("Percentage of patients screened that were infected:", percent_infected, "%\n")
cat("Percentage of patients that identified as male:", percent_male, "%\n")
cat("Percentage of patients that identified as female:", percent_female, "%\n")
print(age_dist_hist)
}
setwd('/Users/laurenlatimer/Biocomputing/Biocomputing-Final-Project')
analyze_data('allData.csv')
melted_data <- reshape2::melt(all.data, id.vars = c("Country"), measure.vars = paste("marker", 1:10, sep = ""))
# Create a bar plot of marker frequency split by country
marker_frequency_plot <- ggplot(melted_data, aes(x = variable, fill = factor(value))) +
geom_bar(position = "dodge", alpha = 0.7) +
facet_wrap(~Country, scales = "free_y") +
labs(title = "Marker Frequency by Country",
x = "Marker",
y = "Frequency",
fill = "Marker Present")
library(ggplot2)
melted_data <- reshape2::melt(all.data, id.vars = c("Country"), measure.vars = paste("marker", 1:10, sep = ""))
# Create a bar plot of marker frequency split by country
marker_frequency_plot <- ggplot(melted_data, aes(x = variable, fill = factor(value))) +
geom_bar(position = "dodge", alpha = 0.7) +
facet_wrap(~Country, scales = "free_y") +
labs(title = "Marker Frequency by Country",
x = "Marker",
y = "Frequency",
fill = "Marker Present")
# Create a bar plot of marker frequency split by country
marker_frequency_plot <- ggplot(all.data, aes(x = variable, fill = factor(value))) +
geom_bar(position = "dodge", alpha = 0.7) +
facet_wrap(~Country, scales = "free_y") +
labs(title = "Marker Frequency by Country",
x = "Marker",
y = "Frequency",
fill = "Marker Present")
# Create a bar plot of marker frequency split by country
ggplot(all.data, aes(x = variable, fill = factor(value))) +
geom_bar(position = "dodge", alpha = 0.7) +
facet_wrap(~Country, scales = "free_y") +
labs(title = "Marker Frequency by Country",
x = "Marker",
y = "Frequency",
fill = "Marker Present")
analyze_data('allData.csv')
analyze_data <- function(data_file) {
all_data <- read.csv(data_file, header=TRUE)
# find the number of screenings run
num_screens <- nrow(all_data)
# initialize list of length(num_screens) to later store infection status of patient
all_data$infected <- rep(0, num_screens)
# iterate over each row and column of data to determine if marker is present for each screen
for (i in 1:num_screens) {
for (j in 3:12) {
if(all_data[i, j] == 1) {
# store 1 in list to indicate infection in screening
all_data$infected[i] <- 1
break
}
}
}
# find percentage of screens that indicate infection
percent_infected <- (sum(all_data$infected) / num_screens) * 100
# find percentage of patients by gender identity
percent_male <- (sum(all_data$gender == "male") / num_screens) * 100
percent_female <- (sum(all_data$gender == "female") / num_screens) * 100
# create an age distribution plot
age_dist_hist <- ggplot(all_data, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = "Age Distribution",
x = "Age",
y = "Frequency")
# print information
cat("Summary: \n")
cat("Number of screens run:", num_screens, "\n")
cat("Percentage of patients screened that were infected:", percent_infected, "%\n")
cat("Percentage of patients that identified as male:", percent_male, "%\n")
cat("Percentage of patients that identified as female:", percent_female, "%\n")
print(age_dist_hist)
}
analyze_data('allData.csv')
View(all.data)
print(all.data$infected[0])
print(all.data$infected[700])
ggplot(all.data, aes(x = Country, fill = factor(infected))) +
geom_bar(position = "dodge", alpha = 0.7) +
labs(title = "Number of Infected People by Country",
x = "Country",
y = "Number of Infected",
fill = "Infected")
ggplot(all.data, aes(x = country, fill = factor(infected))) +
geom_bar(position = "dodge", alpha = 0.7) +
labs(title = "Number of Infected People by Country",
x = "Country",
y = "Number of Infected",
fill = "Infected")
# iterate over each row and column of data to determine if marker is present for each screen
num_screens <- nrow(all_data)
for (i in 1:num_screens) {
for (j in 3:12) {
if(all_data[i, j] == 1) {
# store 1 in list to indicate infection in screening
all_data$infected[i] <- 1
break
}
}
}
# iterate over each row and column of data to determine if marker is present for each screen
num_screens <- nrow(all.data)
# iterate over each row and column of data to determine if marker is present for each screen
num_screens <- nrow(all.data)
for (i in 1:num_screens) {
for (j in 3:12) {
if(all.data[i, j] == 1) {
# store 1 in list to indicate infection in screening
all.data$infected[i] <- 1
break
}
}
}
for (i in 1:num_screens) {
for (j in 3:12) {
if(all.data[i, j] == 1) {
# store 1 in list to indicate infection in screening
all.data$infected[i] <- 1
break
}
else {
all.data$infected[i] <- 0
}
}
}
View(all.data)
percent_infected <- (sum(all_data$infected) / num_screens) * 100
percent_infected <- (sum(all.data$infected) / num_screens) * 100
ggplot(all.data, aes(x = country, fill = factor(infected))) +
geom_bar(position = "dodge", alpha = 0.7) +
labs(title = "Number of Infected People by Country",
x = "Country",
y = "Number of Infected",
fill = "Infected")
country_x_data <- all.data %>%
filter(Country == "X")
country_x_data <- filter(Country == "X", data=all.data)
help("filter")
# Create a histogram for Country X
histogram_country_x <- ggplot(all.data, aes(x = dayofYear, y = infected)) +
geom_col(stat = "summary", fun = "sum") +
labs(title = "Total Number of Infections for Country X by Day of Year",
x = "Day of Year",
y = "Total Number of Infections") +
theme_minimal()
# Create a histogram for Country X
ggplot(all.data, aes(x = dayofYear, y = infected)) +
geom_col(stat = "summary", fun = "sum") +
labs(title = "Total Number of Infections for Country X by Day of Year",
x = "Day of Year",
y = "Total Number of Infections") +
theme_minimal()
# Create a histogram for Country X
ggplot(all.data, aes(x = dayofYear, y = infected)) +
labs(title = "Total Number of Infections for Country X by Day of Year",
x = "Day of Year",
y = "Total Number of Infections") +
theme_minimal()
# Create a histogram for Country X
histogram_country_x <- ggplot(all.data, aes(x = dayofYear, y = infected)) +
geom_col() +
labs(title = "Total Number of Infections for Country X by Day of Year",
x = "Day of Year",
y = "Total Number of Infections") +
theme_minimal()
# Create a histogram for Country X
histogram_country_x <- ggplot(all.data, aes(x = dayofYear, y = infected)) +
geom_col(stat = "summary", fun = "sum") +
labs(title = "Total Number of Infections for Country X by Day of Year",
x = "Day of Year",
y = "Total Number of Infections") +
theme_minimal()
# Create a histogram for Country X
ggplot(all.data, aes(x = dayofYear, y = infected)) +
geom_col(stat = "summary", fun = "sum") +
labs(title = "Total Number of Infections for Country X by Day of Year",
x = "Day of Year",
y = "Total Number of Infections") +
theme_minimal()
# Create a histogram for Country X
ggplot(all.data, aes(x = dayofYear, y = infected)) +
geom_col() +
labs(title = "Total Number of Infections for Country X by Day of Year",
x = "Day of Year",
y = "Total Number of Infections") +
theme_minimal()
# Create a histogram for Country X
ggplot(all.data, aes(x = dayofYear, y = infected, fill = country)) +
geom_col() +
labs(title = "Total Number of Infections for Country X by Day of Year",
x = "Day of Year",
y = "Total Number of Infections") +
theme_minimal()
# initialize list of length(num_screens) to later store infection status of patient
all.data$infected <- rep(0, num_screens)
# iterate over each row and column of data to determine if marker is present for each screen
num_screens <- nrow(all.data)
for (i in 1:num_screens) {
for (j in 3:12) {
if(all.data[i, j] == 1) {
# store 1 in list to indicate infection in screening
all.data$infected[i] <- 1
break
}
}
}
for (i in 1:num_screens) {
for (j in 3:12) {
if(all.data[i, j] == 1) {
# store 1 in list to indicate infection in screening
all.data$infected[i] <- 1
break}}}
# create a histogram showing frequency of infection per day of year
ggplot(all.data, aes(x = dayofYear, y = infected, fill = country)) +
geom_col() +
labs(title = "Total Number of Infections in each Country per Day of Year",
x = "Day of Year",
y = "Total Number of Infections") +
theme_minimal()
