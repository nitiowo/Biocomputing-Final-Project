data$date[d]=paste(z[8], z[9], z[10])
}
alldata=rbind(alldata, data)
setwd("..")
}
final=write.csv(alldata, finalfile)
return(alldata)
}
getwd()
setwd("..")
filecompile(countryX, "countryXfinal.csv")
filecompile("countryX", "countryXfinal.csv")
# 2: A function to compile data from all .csv files to one single .csv file
filecompile=function(directory=d, finalfile="final.csv"){
alldata=data.frame(colnames(c("gender", "age", "marker01", "marker02", "marker03", "marker04", "marker05", "marker06", "marker07", "marker08", "marker09", "marker10", "country", "date")))
files=list.files(path=directory, pattern=".csv")
for(i in 1:length(files)){
filename=files[i]
setwd(directory)
data=read.csv(files[i], header=TRUE)
data$country[1:nrow(data)]=directory
for(d in 1:nrow(data)){
z<-unlist(strsplit(filename, split=""))
data$date[d]=paste(z[8], z[9], z[10])
gsub(" ", "", data$date[d])
}
alldata=rbind(alldata, data)
setwd("..")
}
final=write.csv(alldata, finalfile)
return(alldata)
}
getwd()
filecompile("countryX", "countryXfinal.csv")
# 2: A function to compile data from all .csv files to one single .csv file
filecompile=function(directory=d, finalfile="final.csv"){
alldata=data.frame(colnames(c("gender", "age", "marker01", "marker02", "marker03", "marker04", "marker05", "marker06", "marker07", "marker08", "marker09", "marker10", "country", "date")))
files=list.files(path=directory, pattern=".csv")
for(i in 1:length(files)){
filename=files[i]
setwd(directory)
data=read.csv(files[i], header=TRUE)
data$country[1:nrow(data)]=directory
for(d in 1:nrow(data)){
z<-unlist(strsplit(filename, split=""))
data$date[d]=paste(z[8], z[9], z[10])
data$date[d]=gsub(" ", "", data$date[d])
}
alldata=rbind(alldata, data)
setwd("..")
}
final=write.csv(alldata, finalfile)
return(alldata)
}
getwd()
filecompile("countryX", "countryXfinal.csv")
alldata[2]
alldata=read.csv("countryXfinal.csv")
alldata[2]
alldata[2,]
alldata$date[2]
length(alldata$date[2])
# 2: A function to compile data from all .csv files to one single .csv file
#INPUT: the directory where the .csv files are located ("d")-- must be in the parent directory
#OUTPUT: a .csv file created in the parent directory ("finalfile")
filecompile=function(directory=d, finalfile="final.csv", removeNA="no"){
alldata=data.frame(colnames(c("gender", "age", "marker01", "marker02", "marker03", "marker04", "marker05", "marker06", "marker07", "marker08", "marker09", "marker10", "country", "date")))
files=list.files(path=directory, pattern=".csv")
for(i in 1:length(files)){
filename=files[i]
setwd(directory)
data=read.csv(files[i], header=TRUE)
data$country[1:nrow(data)]=directory
for(d in 1:nrow(data)){
z<-unlist(strsplit(filename, split=""))
data$date[d]=paste(z[8], z[9], z[10])
data$date[d]=gsub(" ", "", data$date[d])
}
alldata=rbind(alldata, data)
setwd("..")
}
final=write.csv(alldata, finalfile)
for(n in 1:nrow(alldata)){
if(removeNA=="yes"){
for(a in 3:12){
if(alldata[n,a]=="NA"){
alldata=alldata.drop(alldata.index[n])
}
}
}
else if(removeNA=="warn"){
for(a in 3:12){
if(alldata[n,a]=="NA"){
print(cat("Warning! This row contains NA values: ", n))
}
}
}
}
return(alldata)
}
getwd()
# 2: A function to compile data from all .csv files to one single .csv file
#INPUT: the directory where the .csv files are located ("d")-- must be in the parent directory and
## whether you want to removeNA values ("yes"), be warned of their presence ("warn"), or ignore them ("no")
#OUTPUT: a .csv file created in the parent directory ("finalfile")
filecompile=function(directory=d, finalfile="final.csv", removeNA="no"){
alldata=data.frame(colnames(c("gender", "age", "marker01", "marker02", "marker03", "marker04", "marker05", "marker06", "marker07", "marker08", "marker09", "marker10", "country", "date")))
files=list.files(path=directory, pattern=".csv")
for(i in 1:length(files)){
filename=files[i]
setwd(directory)
data=read.csv(files[i], header=TRUE)
data$country[1:nrow(data)]=directory
for(d in 1:nrow(data)){
z<-unlist(strsplit(filename, split=""))
data$date[d]=paste(z[8], z[9], z[10])
data$date[d]=gsub(" ", "", data$date[d])
}
alldata=rbind(alldata, data)
setwd("..")
}
final=write.csv(alldata, finalfile)
for(n in 1:nrow(alldata)){
if(removeNA=="yes"){
for(a in 3:12){
if(alldata[n,a]=="NA"){
alldata=alldata.drop(alldata.index[n])
}
}
}
else if(removeNA=="warn"){
for(a in 3:12){
if(alldata[n,a]=="NA"){
print(cat("Warning! This row contains NA values: ", n))
}
}
}
}
return(alldata)
}
getwd
getwd()
filecompile("countryX", "countryXfinal.csv", "warn")
getwd()
setwd("countryY")
filetocsv("screen_121.csv", head=TRUE)
# 1: A function to convert .txt files to .csv files
#INPUT: x must be a filename, head must be a boolean (indicates whether headers should be taken), sep must be a string (tab or space most common)
#OUTPUT: the inputted file, reformatted as a .csv file
filetocsv=function(filename=x, head=FALSE, sep=" "){
init=read.table(filename, header=head, sep=sep)
csv=write.csv(init)
return(csv)
}
filetocsv("screen_121.csv", head=TRUE)
filetocsv("screen_121.txt", head=TRUE)
write.csv(filetocsv("screen_164.txt", head=TRUE), "screen_164.csv")
# 1: A function to convert .txt files to .csv files
#INPUT: x must be a filename, head must be a boolean (indicates whether headers should be taken), sep must be a string (tab or space most common)
#OUTPUT: the inputted file, reformatted as a .csv file
filetocsv=function(filename=x, head=FALSE, sep=" ", csvname="default.csv"){
init=read.table(filename, header=head, sep=sep)
csv=write.csv(init, csvname)
return(csv)
}
filetocsv("screen_164.txt", header=TRUE)
filetocsv("screen_164.txt", head=TRUE)
# 1: A function to convert .txt files to .csv files
#INPUT: x must be a filename, head must be a boolean (indicates whether headers should be taken), sep must be a string (tab or space most common)
#OUTPUT: the inputted file, reformatted as a .csv file
filetocsv=function(filename=x, head=FALSE, sep=" ", csvname="default.csv"){
init=read.table(filename, header=head, sep=sep)
csv=write.csv(init, csvname)
return(csvname)
}
filetocsv("screen_164.txt", head=TRUE)
# 3: A function to summarize compiled data. Include:
# number of screens run, % infected patients, gender makeup of pop., age distribution
#INPUT: a data file containing the given columns (disease marker(s), gender, age)
#OUTPUT: a summary of # screens, % infected, gender makeup AND a plot of age distribution
summarizeData=function(data=x){
numscreens=nrow(data)
infected=0
for(n in 1:nrow(data)){
for(c in 1:ncol(data)){
if(data[n,c]==1){
infected=infected+1
break #even one disease marker is sufficient to have the disease
}
}
}
pctinfected=infected/nrow(data)*100
males=0
females=0
for(n in 1:nrow(data)){
if(data$gender[n]=="male"){
males=males+1
}
else if(data$gender[n]=="female"){
females=females+1
}
}
pctmales=(males/nrow(data))*100
pctfemales=(females/nrow(data))*100
summary=data.frame(numscreens, pctinfected, pctmales, pctfemales)
agedist<-ggplot(data = data, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "darkgoldenrod1", color = "darkblue") +
theme_classic()
print(agedist)
return(summary)
}
summarizeData(alldata)
install.packages("ggplot2")
library(ggplot2)
# 3: A function to summarize compiled data. Include:
# number of screens run, % infected patients, gender makeup of pop., age distribution
#INPUT: a data file containing the given columns (disease marker(s), gender, age)
#OUTPUT: a summary of # screens, % infected, gender makeup AND a plot of age distribution
summarizeData=function(data=x){
numscreens=nrow(data)
infected=0
for(n in 1:nrow(data)){
for(c in 1:ncol(data)){
if(data[n,c]==1){
infected=infected+1
break #even one disease marker is sufficient to have the disease
}
}
}
pctinfected=infected/nrow(data)*100
males=0
females=0
for(n in 1:nrow(data)){
if(data$gender[n]=="male"){
males=males+1
}
else if(data$gender[n]=="female"){
females=females+1
}
}
pctmales=(males/nrow(data))*100
pctfemales=(females/nrow(data))*100
summary=data.frame(numscreens, pctinfected, pctmales, pctfemales)
agedist<-ggplot(data = data, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "darkgoldenrod1", color = "darkblue") +
theme_classic()
print(agedist)
return(summary)
}
summarizeData(alldata)
getwd()
setwd("..")
ytxt=list.files("countryY", pattern=".txt")
for(y in 1:length(ytxt)){setwd("countryY"); filetocsv(ytxt[y], head=TRUE, cat(y, "y.csv"))}
getwd()
setwd("..")
getwd()
for(y in 1:length(ytxt)){setwd("countryY"); filetocsv(ytxt[y], head=TRUE, cat(y, "y.csv")); setwd("..")}
getwd()
for(y in 1:length(ytxt)){setwd("countryY"); filetocsv(ytxt[y], head=TRUE, csvname=cat(y, "y.csv")); setwd("..")}
cat(1, "e.csv")
cat("yscreen", 2, "e.csv")
paste("yscreen", 2, "e.csv")
for(y in 1:length(ytxt)){setwd("countryY"); name<-unlist(strsplit(ytxt[y]), ""); newname=paste("screen", name[8], name[9], name[10], ".csv"); newname=gsub(" ", "", newname); filetocsv(ytxt[y], head=TRUE, csvname=newname); setwd("..")}
getwd()
setwd("..")
for(y in 1:length(ytxt)){setwd("countryY"); name<-unlist(strsplit(ytxt[y]), ""); newname=paste("screen", name[8], name[9], name[10], ".csv"); newname=gsub(" ", "", newname); filetocsv(ytxt[y], head=TRUE, csvname=newname); setwd("..")}
for(y in 1:length(ytxt)){setwd("countryY"); name<-unlist(strsplit(ytxt[y], ""); newname=paste("screen", name[8], name[9], name[10], ".csv"); newname=gsub(" ", "", newname); filetocsv(ytxt[y], head=TRUE, csvname=newname); setwd("..")}
for(y in 1:length(ytxt)){setwd("countryY"); name<-unlist(strsplit(ytxt[y], "")); newname=paste("screen", name[8], name[9], name[10], ".csv"); newname=gsub(" ", "", newname); filetocsv(ytxt[y], head=TRUE, csvname=newname); setwd("..")}
setwd("..")
for(y in 1:length(ytxt)){setwd("countryY"); name<-unlist(strsplit(ytxt[y], "")); newname=paste("screen", name[8], name[9], name[10], ".csv"); newname=gsub(" ", "", newname); filetocsv(ytxt[y], head=TRUE, csvname=newname); setwd("..")}
source("supportingFunction.R")
source("supportingFunctions.R")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
getwd()
#Step 2 - Create Datafiles for Country X and Country Y
filecompile("countryX", finalfile="countryXfinal.csv")
filecompile("countryY", finalfile="countryYfinal.csv")
for(y in 1:length(ytxt)){
setwd("countryY")
name<-unlist(strsplit(ytxt[y], ""))
newname=paste("screen_", name[8], name[9], name[10], ".csv")
newname=gsub(" ", "", newname)
filetocsv(ytxt[y], head=TRUE, csvname=newname); setwd("..")
}
filecompile("countryY", finalfile="countryYfinal.csv")
source("supportingFunctions.R")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
#Step 3 - Determine the country where the outbreak began
# Use a line graph for running trends
Xdata=read.csv("countryXfinal.csv", header=TRUE)
Ydata=read.csv("countryYfinal.csv", header=TRUE)
Ydata=subset(Ydata, select=-X)
Ydata
Ydata=read.csv("countryYfinal.csv", header=TRUE)
Ydata
Ydata=subset(Ydata, select=-X)
Ydata
Xdata$date[12]
infectedbyday=data.frame(date, num_infected)
infectedbyday=data.frame(colnames(c(date, num_infected)))
infectedbyday=data.frame(colnames(c("date", "num_infected")))
for(d in 120:175){
infected=0
for(n in 1:nrow(Xdata)){
while(Xdata$date[n]==d){
for(c in 1:ncol(Xdata[n])){
if(Xdata[n,c]==1){
infected=infected+1
break
}
}
}
ibd=data.frame(date=d, num_infected=infected)
}
infectedbyday=rbind(infectedbyday, ibd)
}
infected=0
# 3: A function to summarize compiled data. Include:
# number of screens run, % infected patients, gender makeup of pop., age distribution
#INPUT: a data file containing the given columns (disease marker(s), gender, age), and the number of screens you want summary data for (default=10000, but can be a variable like nrow(data))
#OUTPUT: a summary of # screens, % infected, gender makeup AND a plot of age distribution
summarizeData=function(data=x, numscreens=10000){
infected=0
for(n in 1:numscreens){
for(c in 1:ncol(data)){
if(data[n,c]==1){
infected=infected+1
break #even one disease marker is sufficient to have the disease
}
}
}
pctinfected=infected/numscreens*100
males=0
females=0
for(n in 1:numscreens){
if(data$gender[n]=="male"){
males=males+1
}
else if(data$gender[n]=="female"){
females=females+1
}
}
pctmales=(males/numscreens)*100
pctfemales=(females/numscreens)*100
summary=data.frame(numscreens, pctinfected, pctmales, pctfemales)
agedist<-ggplot(data = data, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "darkgoldenrod1", color = "darkblue") +
theme_classic()
print(agedist)
return(summary)
}
summarizeData(Xdata)
summarizeData(Xdata, nrow(Xdata))
for(i in 1:nrow(Xdata)){
summarizeData(Xdata, i)
}
for(i in 1:10){
summarizeData(Xdata, i)
}
for(i in 1:10){
print(summarizeData(Xdata, i))
}
for(i in 1:10000, by=10){
for(i in seq(1, nrow(Xdata), by=1000)){
print(summarizeData(Xdata, i))
}
Xrunning=summarizeData(Xdata, 1)
Xrunning
for(i in seq(1, nrow(Xdata), by=1000)){
t=summarizeData(Xdata, i)
print(t)
Xrunning=rbind(Xrunning, t)
}
Xrunning
Yrunning=summarizeData(Ydata, 1)
for(i in seq(1, nrow(Ydata), by=1000)){
t=summarizeData(Ydata, i)
print(t)
Yrunning=rbind(Yrunning, t)
}
Yrunning
ggplot() +
geom_line(data=Xrunning, aes(x=numscreens, y=pctinfected), color="red") +
geom_line(data=Yrunning, aes(x=numscreens, y=pctinfected), color="forestgreen") +
theme_classic()
# 3: A function to summarize compiled data. Include:
# number of screens run, % infected patients, gender makeup of pop., age distribution
#INPUT: a data file containing the given columns (disease marker(s), gender, age), and the number of screens you want summary data for (default=10000, but can be a variable like nrow(data))
#OUTPUT: a summary of # screens, % infected, gender makeup AND a plot of age distribution
summarizeData=function(data=x, numscreens=10000){
infected=0
for(n in 1:numscreens){
for(c in 3:12){
if(data[n,c]==1){
infected=infected+1
break #even one disease marker is sufficient to have the disease
}
}
}
pctinfected=infected/numscreens*100
males=0
females=0
for(n in 1:numscreens){
if(data$gender[n]=="male"){
males=males+1
}
else if(data$gender[n]=="female"){
females=females+1
}
}
pctmales=(males/numscreens)*100
pctfemales=(females/numscreens)*100
summary=data.frame(numscreens, pctinfected, pctmales, pctfemales)
agedist<-ggplot(data = data, aes(x = age)) +
geom_histogram(binwidth = 1, fill = "darkgoldenrod1", color = "darkblue") +
theme_classic()
print(agedist)
return(summary)
}
Xrunning=summarizeData(Xdata, 1)
Yrunning=summarizeData(Ydata, 1)
Yrunning
for(i in seq(1, nrow(Xdata), by=1000)){
t=summarizeData(Xdata, i)
print(t)
Xrunning=rbind(Xrunning, t)
}
for(i in seq(1, nrow(Ydata), by=1000)){
t=summarizeData(Ydata, i)
print(t)
Yrunning=rbind(Yrunning, t)
}
ggplot() +
geom_line(data=Xrunning, aes(x=numscreens, y=pctinfected), color="red") +
geom_line(data=Yrunning, aes(x=numscreens, y=pctinfected), color="forestgreen") +
theme_classic()
ggplot() +
geom_line(data=Xrunning, aes(x=numscreens, y=pctinfected), color="darkorchid4") +
geom_line(data=Yrunning, aes(x=numscreens, y=pctinfected), color="darkorange1") +
theme_classic()
Ymarkers=data.frame(marker01=sum(Ydata$marker01), marker02=sum(Ydata$marker02), marker03=sum(Ydata$marker03), marker04=sum(Ydata$marker04), marker05=sum(Ydata$marker05), marker06=sum(Ydata$marker06), marker07=sum(Ydata$marker07), marker08=sum(Ydata$marker08), marker09=sum(Ydata$marker09), marker10=sum(Ydata$marker10))
Ymarkers
Xmarkers=data.frame(marker01=sum(Xdata$marker01), marker02=sum(Xdata$marker02), marker03=sum(Xdata$marker03), marker04=sum(Xdata$marker04), marker05=sum(Xdata$marker05), marker06=sum(Xdata$marker06), marker07=sum(Xdata$marker07), marker08=sum(Xdata$marker08), marker09=sum(Xdata$marker09), marker10=sum(Xdata$marker10))
Xmarkers
ggplot() +
geom_histogram(data=Ymarkers, color="black", fill="darkorchid4") +
geom_histogram(data=Xmarker, color="black", fill="darkorange1") +
theme_classic()
ggplot() +
geom_histogram(data=Ymarkers, color="black", fill="darkorchid4") +
geom_histogram(data=Xmarkers, color="black", fill="darkorange1") +
theme_classic()
rlang::last_trace()
ggplot() +
geom_histogram(data=Ymarkers, color="black", fill="darkorchid4") +
theme_classic()
ggplot(data = Ymarkers) +
geom_histogram(fill = "red", color = "black") +
theme_classic()
Xmarkers
Ymarkers
Xmarkers=data.frame(markers=c(1:10), count=c(sum(Xdata$marker01)), sum(Xdata$marker02), sum(Xdata$marker03), sum(Xdata$marker04), sum(Xdata$marker05), sum(Xdata$marker06), sum(Xdata$marker07), sum(Xdata$marker08), sum(Xdata$marker09), sum(Xdata$marker10))
Xmarkers=data.frame(markers=c(1:10), count=c(sum(Xdata$marker01)), sum(Xdata$marker02), sum(Xdata$marker03), sum(Xdata$marker04), sum(Xdata$marker05), sum(Xdata$marker06), sum(Xdata$marker07), sum(Xdata$marker08), sum(Xdata$marker09), sum(Xdata$marker10))
Xmarkers
Xmarkers=data.frame(markers=c(1:10), count=c(sum(Xdata$marker01), sum(Xdata$marker02), sum(Xdata$marker03), sum(Xdata$marker04), sum(Xdata$marker05), sum(Xdata$marker06), sum(Xdata$marker07), sum(Xdata$marker08), sum(Xdata$marker09), sum(Xdata$marker10))
)
Xmarkers
Xmarkers=data.frame(markers=c(1:10), count=c(sum(Xdata$marker01), sum(Xdata$marker02), sum(Xdata$marker03), sum(Xdata$marker04), sum(Xdata$marker05), sum(Xdata$marker06), sum(Xdata$marker07), sum(Xdata$marker08), sum(Xdata$marker09), sum(Xdata$marker10)))
Xmarkers
Ymarkers=data.frame(markers=c(1:10), count=c(sum(Ydata$marker01), sum(Ydata$marker02), sum(Ydata$marker03), sum(Ydata$marker04), sum(Ydata$marker05), sum(Ydata$marker06), sum(Ydata$marker07), sum(Ydata$marker08), sum(Ydata$marker09), sum(Ydata$marker10)))
Ymarkers
ggplot() +
geom_histogram(data=Xmarkers) +
geom_histogram(data=Ymarkers) +
theme_classic()
ggplot() +
geom_histogram(data=Xmarkers, aes(x=count)) +
geom_histogram(data=Ymarkers, aes(x=count)) +
theme_classic()
ggplot() +
geom_histogram(data=Xmarkers, aes(x=markers)) +
geom_histogram(data=Ymarkers, aes(x=markers)) +
theme_classic()
ggplot() +
geom_histogram(data=Xmarkers, aes(x=markers, y=count)) +
geom_histogram(data=Ymarkers, aes(x=markers, y=count)) +
theme_classic()
ggplot() +
geom_histogram(data=Xmarkers, aes(x=count)) +
theme_classic()
ggplot() +
geom_histogram(data=Xmarkers, aes(x=markers)) +
theme_classic()
ggplot() +
geom_bar(data=Xmarkers, aes(x=markers, y=count)) +
theme_classic()
Xmarkers
Xmarkers$country=X
Xmarkers$country="X"
Xmarkers
Ymarkers$country="Y"
Ymarkers
markers=rbind(Xmarkers, Ymarkers)
markers
ggplot(markers, aes(markers, count, fill=country)) +
geom_bar(stat="identity", position="dodge") +
theme_classic()
